#version 450

#include "generic_head.comp"
#include "types.comp"

#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0) readonly buffer GRAD {A_TYPE data_grad[];};
layout (binding = 1) readonly buffer X {B_TYPE data_x[];};
layout (binding = 2) writeonly buffer D {D_TYPE data_d[];};

float gelu(float x) {
    const float c = 0.797884560802865; // sqrt(2/pi)
    const float a = 0.044715;
    const float inner = c * (x + a * x * x * x);
    return 0.5 * x * (1.0 + tanh(inner));
}

float gelu_derivative(float x) {
    const float c = 0.797884560802865; // sqrt(2/pi)
    const float a = 0.044715;
    const float x_squared = x * x;
    const float x_cubed = x_squared * x;
    const float inner = c * (x + a * x_cubed);
    const float tanh_val = tanh(inner);
    const float sech2_val = 1.0 - tanh_val * tanh_val;
    const float dtanh_dx = c * (1.0 + 3.0 * a * x_squared) * sech2_val;
    return 0.5 * (1.0 + tanh_val + x * dtanh_dx);
}

void main() {
    const uint i = gl_GlobalInvocationID.z * 262144 + gl_GlobalInvocationID.y * 512 + gl_GlobalInvocationID.x;

    if (i >= p.KX) {
        return;
    }

    const uint half_size = p.KX / 2;

    if (i < half_size) {
        const float grad_val = float(data_grad[i]);
        const float g_val = float(data_x[i + half_size]);
        data_d[i] = D_TYPE(grad_val * gelu(g_val));
    } else {
        const uint idx = i - half_size;
        const float grad_val = float(data_grad[idx]);
        const float x_val = float(data_x[idx]);
        const float g_val = float(data_x[i]);
        data_d[i] = D_TYPE(grad_val * x_val * gelu_derivative(g_val));
    }
}
